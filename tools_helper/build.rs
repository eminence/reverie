use std::{fs, fs::File, io, io::Write, path::Path};
use tempfile::NamedTempFile;

fn main() {
    std::fs::copy("../src/consts.rs", "src/consts.rs").unwrap();
    std::fs::copy("../src/state.rs", "src/state.rs").unwrap();
    std::fs::copy("../src/local_state.rs", "src/local_state.rs").unwrap();

    let msg1 = "// AUTOMATICALLY GENERATED by tools_helper/build.rs by copying systrace/src/state.rs. DO NOT EDIT.\n\n";
    let fp1 = Path::new("src/state.rs");
    prepend_file(msg1.as_bytes(), &fp1).unwrap();

    let msg2 = "// AUTOMATICALLY GENERATED by tools_helper/build.rs by copying systrace/src/consts.rs. DO NOT EDIT.\n\n";
    let fp2 = Path::new("src/consts.rs");
    prepend_file(msg2.as_bytes(), &fp2).unwrap();

    let msg3 = "// AUTOMATICALLY GENERATED by tools_helper/build.rs by copying systrace/src/local_state.rs. DO NOT EDIT.\n\n";
    let fp3 = Path::new("src/local_state.rs");
    prepend_file(msg3.as_bytes(), &fp3).unwrap();
}

// Copied from https://stackoverflow.com/a/43441946, but uses 'tempfile' instead of 'mktemp'.
fn prepend_file<P: AsRef<Path>>(prefix: &[u8], filepath: &P) -> io::Result<()> {
    // Open a temporary file for writing
    let mut tmp = NamedTempFile::new()?;
    // Open source file for reading
    let mut src = File::open(&filepath)?;
    // Write the data to prepend
    tmp.write_all(&prefix)?;
    // Copy the rest of the source file
    io::copy(&mut src, &mut tmp)?;
    fs::remove_file(&filepath)?;
    fs::rename(&tmp.path(), &filepath)?;
    Ok(())
}
