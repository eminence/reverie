use std::fs::File;
use std::io::{Result, Write};

fn main() -> Result<()> {
    let cwd = std::env::current_dir()?;

    let src_dir = std::fs::canonicalize(cwd.join("../src"))?;
    let dst_dir = std::fs::canonicalize(cwd.join("src"))?;

    let files_to_copy = &[ "consts.rs", "profiling.rs", "state.rs", "local_state.rs"];
    files_to_copy.iter().for_each(|f| {
        let do_copy: Box<dyn Fn() -> Result<()>> = Box::new(|| {
            let mut src = File::open(src_dir.join(f))?;
            let mut dst = File::create(dst_dir.join(f))?;
            let header = format!("// AUTOMATICALLY GENERATED by build.rs by copying {:?}. DO NOT EDIT.\n\n",src_dir.join(f));
            dst.write_all(header.as_bytes())?;
            std::io::copy(&mut src, &mut dst)?;
            Ok(())
        });
        do_copy().expect("failed to copy files");
    });
    Ok(())
}
