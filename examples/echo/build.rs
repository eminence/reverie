use cc;
use std::{fs, fs::File, io, io::Write, path::{Path, PathBuf}};
use tempfile::NamedTempFile;

fn main() -> io::Result<()> {
    cc::Build::new()
        .define("_POSIX_C_SOURCE", "20180920")
        .define("_GNU_SOURCE", "1")
        .define("USE_SAVE", "1")
        .flag("-fPIC")
        .include("../../include")
        .include("../../trampoline")
        .file("../../trampoline/trampoline.S")
        .file("../../trampoline/raw_syscall.S")
        .file("../../trampoline/remote_call.S")
        .compile("my-trampoline");
    std::fs::copy("../../trampoline/ffi.rs", "src/ffi.rs")?;
    std::fs::copy("../../src/consts.rs", "src/consts.rs")?;
    let filepath = PathBuf::from("src/ffi.rs");
    let msg = "// AUTOMATICALLY GENERATED by build.rs by copying systrace/trampoline/ffi.rs. DO NOT EDIT.\n\n";
    prepend_file(msg.as_bytes(), &filepath)?;

    let filepath = PathBuf::from("src/consts.rs");
    let msg = "// AUTOMATICALLY GENERATED by build.rs by copying systrace/src/consts.rs. DO NOT EDIT.\n\n";
    prepend_file(msg.as_bytes(), &filepath)
}

// Copied from https://stackoverflow.com/a/43441946, but uses 'tempfile' instead of 'mktemp'.
fn prepend_file<P: AsRef<Path>>(prefix: &[u8], filepath: &P) -> io::Result<()> {
    // Open a temporary file for writing
    let mut tmp = NamedTempFile::new()?;
    // Open source file for reading
    let mut src = File::open(&filepath)?;
    // Write the data to prepend
    tmp.write_all(&prefix)?;
    // Copy the rest of the source file
    io::copy(&mut src, &mut tmp)?;
    fs::remove_file(&filepath)?;
    fs::rename(&tmp.path(), &filepath)?;
    Ok(())
}
